# Generated by Django 5.1.7 on 2025-04-20 12:13

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "roll_no",
                    models.CharField(
                        max_length=6,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Roll number must be exactly 6 digits",
                                regex="^[0-9]{6}$",
                            )
                        ],
                    ),
                ),
                (
                    "branch",
                    models.CharField(
                        choices=[
                            ("BT", "Biotechnology"),
                            ("CH", "Chemical Engineering"),
                            ("CE", "Civil Engineering"),
                            ("CS", "Computer Science & Engg."),
                            ("EE", "Electrical Engineering"),
                            ("EC", "Electronics & Communication Engineering"),
                            ("ME", "Mechanical Engineering"),
                            ("MT", "Metallurgical & Materials Engineering"),
                            ("SC", "School of Sciences"),
                            ("HM", "School of Humanities & Management"),
                        ],
                        max_length=2,
                    ),
                ),
                (
                    "year",
                    models.CharField(
                        choices=[
                            ("I", "First Year"),
                            ("II", "Second Year"),
                            ("III", "Third Year"),
                            ("IV", "Fourth Year"),
                        ],
                        max_length=4,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=False)),
                ("is_faculty", models.BooleanField(default=False)),
                ("is_student", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="OTPVerification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("email", models.EmailField(max_length=254)),
                ("otp", models.CharField(max_length=6)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("expires_at", models.DateTimeField()),
                ("is_verified", models.BooleanField(default=False)),
                ("attempts", models.IntegerField(default=0)),
                (
                    "purpose",
                    models.CharField(
                        choices=[
                            ("signup", "Signup Verification"),
                            ("reset", "Password Reset"),
                        ],
                        max_length=20,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["email", "created_at"],
                        name="authenticat_email_8c2d98_idx",
                    )
                ],
            },
        ),
    ]
